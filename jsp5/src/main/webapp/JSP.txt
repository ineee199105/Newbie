JSP.txt

 * 통신 프로토콜 : 통신을 하기위해서 필요한 통신 규약(약속)
   1) 어떤 방식으로 접속
   2) 어떤 속도로 처리
   3) 어떤 형태로 전달
   
 * TCP/IP 프로토콜
    1) 애플리케이션 층 : 사용자가 사용하는 인터넷 응용 프로그램
    2) 트랜스포트 층(TCP/UDP) : 데이터 전송지, 에러검출 및 정정
    3) 네트워크 (인터넷) 층 (IP) : 패킷단위로 데이터를 전환후 올바른 위치로 전달
    4) 데이터 링크 층 : 랜 카드제어 및 데이터 통신을 위한 HW 제어
 
 
 
 
    [애플리케이션 층]		 <- 가상의 데이터 송수신 ->		[애플리케이션 층]
    [트랜스포트 층(TCP/UDP)]								[트랜스포트 층(TCP/UDP)]
    [네트워크 (인터넷) 층 (IP)]								[네트워크 (인터넷) 층 (IP)]		
                            <- 실제 데이터 송수신 - >
    [데이터 링크 층]										[데이터 링크 층]		
 
  
  
  * 서버 / 클라이언트
    서버 : 정보, 서비스를 제공하는 컴퓨터 
    클라이언트 : 서버가 제공하는 정보,서비스를 받는 컴퓨터
    
  
  * IP주소 : 인터넷상에서 컴퓨터를 구분하는 고유한 번호(전화번호)
     x.x.x.x  (x 0~255)
     
  * localhost : 자신의 PC - IP (127.0.0.1)
  
  * 호스트 : 인터넷 상에서 존재하는 컴퓨터
  
  * 포트번호 : 상용 인터넷 프로그램들은 각각의 고유한 포트번호를 부여
    1024이하의 포트번호는 사용 X (mysql 3306, oracle 8080, tomcat 8080)
     
 *  http://localhost:8088/HelloWorld/hello.html
    http://  (통신 프로토콜) 
    localhost  (ip 주소-내PC)
    8088		(포트번호)
    HelloWorld/hello.html  (프로젝트/폴더/파일)
 
 
 * DNS : 도메인을 처리하는 서버
 * 도메인 : 사용자의 IP <-> 주소 변경  
 
 
 
 * 웹 브라우저가 실행되는 순서
 
 
 
 
 				DNS서버 (IP주소 <-> 도메인주소)
             //
  클라이언트  -> www.naver.com 요청 / 192.168.5.200 요청 -> 네이버 서버
  		     \\														|
  					웹페이지 정보(html,css,img)   <- 네이버 서버
  																
  																
  * 정적데이터 : html,css,img,js / 동적데이터 : DB정보 
  
                                (Web Applicaion Server) 
  클라이언트   ->   웹 서버  ->  WAS    ->    DB
  					   |          |		       |
  클라이언트   <-   웹 서버  <-  WAS    <-    DB
                  (정적데이터)   (동적데이터)
  
  
  * 자바 스크립트 (JavaScript) - html언어를 활용하여 다양한 동작을 수행가능한 언어
  
  																
  
 
  * JSP 2.3 & Servlet 3.1
  
  html - 정적데이터만 사용가능, 동적인 데이터 처리 불가능
  
  - 정적데이터 (자원/리소스): 크게 변화가 없는 고정된 데이터(HTML,CSS,JavaScript,이미지...)
     => 웹서버(Web Server) 처리 
  - 동적데이터 (자원/리소스): 변화하는 데이터 (JSP,PHP,ASP,....)
     => WAS(Web Application Server) 처리 
 
 
 
  ASP (.Net) - C#기반
 
  PHP - C기반
  
  JSP - java기반
  
  Servlet => Server + Applet(자바코드를 웹에 사용가능하게 한것)
  web.xml (배포서술자)
 
 
 
 * JSP 구성요소 (P150~)
 
  1) JSP 지시어(Directive) : JSP 파일에서 실행할때 필요한 옵션설정
  
  <%@ page ..... %>
  <%@ include ..... %>
  <%@ taglib ..... %>
  
  2) JSP 스크립트요소
   - 선언문 (Declaration)
    => 멤버변수/멤버메서드를 선언 공간
    
    <%!
       // 멤버변수
       int age = 10;
       
       // 멤버 메서드
       public void method(){
          ...
       } 
      %>
      
   - 스크립틀릿 (Scriptlet)
    => 지역변수의 형태로 HTML코드를 구현 가능한 공간, JSP코드 사용
   
   <%
      .... 실행문;   
   %>
   
    
   - 표현식(Expression) : 선언문/스크립틀릿에 만들어놓은 값을 화면에 출력하는 코드
   
   <%= 변수/연산/메서드() %>
   
 
 
 * p222~
  <jsp:~~> 액션태그 : 자바와 같은 스크립트 언어를 사용하지 않고, (HTML태그) 형태로
  다른페이지의 서블릿,자바빈객체에 접근가능한 동작
  
  
 * include 동작
  1) <jsp:include> (액션태그) : 페이지를 컴파일 후 include 동작 (모듈화)
            => 템플릿 페이지 구성
            
  2) <%@ include > (지시어) : 컴파일전에 코드를 include하고 컴파일 실행 (공통속성값)
           => 소스코드로 추가
   
  
 
  
  
  * web.xml (배포 서술자) : 프로젝트의 시작지점
    xml파일의 형태를 사용 => 오타주의, 주석문 주의
    
  * xml파일 => 태그 형태로 정보를 전달하는 데이터 타입  
    
 
 
 * CRUD 동작
   => DataBase 사용해서
     C reate
     R ead
     U pdate
     D elete
     
     수행하는 형태
 
 
 * P372~ 디비 설치
 * P428~ JDBC
 
  - JDBC(Java DataBase Connectivity) : 자바랑 데이터베이스(mysql)을 연결하는 API
  
  
  
  CREATE TABLE `jspdb`.`itwill_member` (
  `id` VARCHAR(50) NOT NULL,
  `pw` VARCHAR(45) NOT NULL,
  `name` VARCHAR(45) NULL,
  `gender` VARCHAR(45) NULL,
  `age` VARCHAR(45) NULL,
  `email` VARCHAR(200) NOT NULL,
  `reg_date` TIMESTAMP NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE);
  
 
 
   클래스(틀) - 객체(물건)
   -> 객체 대상을 만들기위한 틀이 클래스다.
   
   => 클래스/객체 왜 ?
   
   "데이터" => 변수
   "실행문" => 메서드
   변수+메서드 => 클래스(객체)
   
   * 클래스는 사용자 정의타입
   
   
 P245~
  자바빈(JavaBean) 설계규약
  1) 패키지가 있어야함(기본패키지 X)
  2) 기본 생성자 필요
  3) 멤버변수의 접근지정자는 private
  4) set(),get()메서드 구현 - public
  
 
  * try ~ catch 구문
   => 예외처리구문 : 시스템이 비정상적인 종료를 하지 않도록 도와줌
   
   * 자바에서 예외(상황)는 객체로 처리 => 예외를 던지다
   
   
   try{
      에러가 발생 할지도 모르는 코드 작성
      ( 외부 시스템과의 연결 - DB연결,IO처리 )
   
   }catch(Exception e){
      에러 발생시 대처코드 => 메세지 출력
   }finally{
	   예외 발생 유무와 상관없이 한번만 실행하는 블럭
	   (자원 해제)   
   }
 
    
    int[] arr = new int [10]; => (고정길이)배열, 동일한 데이터만 저장가능
    
 
    ArrayList => (가변길이)배열, 데이터 타입상관없이 저장가능
    // java.util 패키지에 포함
    // 인덱스는 0부터 시작
    
    생성
    ArrayList arr = new ArrayList();
    
    데이터 저장
    arr.add(데이터);
    arr.add(인덱스,데이터);
    
    데이터 사용
    arr.get(인덱스);
    
    
    이름 -> 컬럼 => 변수
    1명의 정보 -> 행 => 객체(MemberBean)
    N명의 정보 -> N 행 => 객체 X N개 ( 한번에 리턴 불가능 )
    
    * 동일한 형태의 데이터 저장=>가변길이 배열
    
    |  MemberBean[id,pw,....]  | MemberBean[id,pw,....]   | MemberBean[id,pw,....]  |    
	         0             				 1           			  2
	  * 배열의 한칸에 MemberBean객체 하나씩 저장         
    
    
 
 ----------------------------------------------------------------------------
  게시판 (board)
  
  글 쓰기 (C) -> 글쓴이, 제목,내용....
  글 목록 (R) -> 글번호, 제목, 조회수, 작성일, ip....
  글 본문 (R) -> 글쓴이, 제목,내용, 댓글
  글 수정 (U)
  글 삭제 (D)
  답글 쓰기 (C)
  
  => DB 테이블 생성
 
 
 CREATE TABLE `jspdb`.`itwill_board` (
  `num` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `pass` VARCHAR(45) NOT NULL,
  `subject` VARCHAR(200) NOT NULL,
  `content` VARCHAR(5000) NOT NULL,
  `readcount` INT NULL,
  `re_ref` INT NULL,
  `re_lev` INT NULL,
  `re_seq` INT NULL,
  `date` DATE NULL,
  `ip` VARCHAR(45) NULL,
  `file` VARCHAR(200) NULL,
  PRIMARY KEY (`num`));
 
 
 
 
 * 커넥션풀 : 연결정보를  pool에 저장
 
 https://commons.apache.org/
 
 commons-collections4-4.4.jar
 commons-pool2-2.11.1.jar
 commons-dbcp2-2.9.0.jar
 
 * 1) 컨테이너 안에는 1개의 연결정보 사용
   2) 백터( Vector )형태와 같은 pool을 사용
   3) 연결정보의 개수를 제한
   4) 사용이 끝난경우 관리자가 자원관리(회수)
   
   
   1. 웹브라우저 요청 (DB연결)
   2. 할당가능한 커넥션객체가 있는지 체크
   3. 커넥션 객체가 있을때
      4. 커넥션 객체 할당
      5. 커넥션 객체 사용
      6. 커넥션 객체 반환
      
   3-1. 커넥션 객체가 없을때
      4. 커넥션 객체가 리턴될때까지 대기, 임시 객체 생성
      
      
 [context.xml]     
    
	<Context> 내 프로젝트
		<Resource      //DB연결에 필요한 리소스(정보)
		   name=""     외부에서 해당 리소스를 호출하는 이름
		   auth="" 	   인증값(자원관리자 설정) - Application/Container 
		   type="" 	   웹 페이지에서 리소스를 사용할때 처리되는 클래스
		   driverClassName=""   디비연결에 필요한 드라이버 
		   username=""          디비 아이디
		   password=""          디비 비밀번호
		   url=""               디비 연결주소
		   maxWait=""	        커넥션 회수 대기시간(ms)
		/>
	</Context>
      
      
      
  [web.xml]
  
  <resource-ref>
    <description> 리소스의 설명 </description>
    <res-ref-name> context.xml 파일 리소스의 name </res-ref-name>
    <res-type>context.xml 파일 리소스의 type</res-type>
    <res-auth>context.xml 파일 리소스의 auth</res-auth>    
  </resource-ref>    
 
 
 ///////////////////////////////////////////////////////////////////////////
 일반글 작성 규칙
 
 1) 전달정보 저장
 2) re_ref : 글번호와 동일
 3) re_lev : 0 (초기화)
 4) re_seq : 0 (초기화)
 
 답글 처리 규칙
 
  * re_ref : 답글의 그룹번호, 답글인경우 부모글의 그룹번호(re_ref)와 동일
  * re_lev : 답글의 들여쓰기, 답글의 경우 부모글의 lev + 1
  * re_seq : 답글의 순서,  답글의 경우 부모글의 seq + 1 (해당 글보다 seq 큰값이 존재하는경우 모두 + 1 )
  
  
  -------------------------------------------------------------------------
  num		subject			re_ref		re_lev		re_seq
  -------------------------------------------------------------------------
  1			글1				1			0			0		
  2			글2				2			0			0
  4			글2-2			2			1			1
  8			글2-2-1			2			2			2		
  3			글2-1			2			1			3 (2+1)
  5			글2-1-1			2			2			4 (3 + 1)
  6			글3				6			0			0
  7			글1-1			1			1			1
  
  
  [정렬 => re_ref 내림차순, re_seq 오름차순]
  -------------------------------------------------------------------------
  num		subject			re_ref		re_lev		re_seq
  -------------------------------------------------------------------------
  6			글4				6			0			0
  11		글4-3			6			1			1
  10		글4-2			6			1			2	
  7			글4-1			6			1			3 (2+1)
  9			글4-1-2			6			2			4 (3+1)	
  8			글4-1-1			6			2			5 (4+1)
  3			글3				3			0			0
  5			글3-2			3			1			1
  4			글3-1			3			1			2
  2			글2				2			0			0
  1			글1				1			0			0
  
  
  
 p305
 http://www.servlets.com/
 
 
  
  
  
 
 
 
 
 
