JQuery.txt

 -> 자바스크립트의 대표적인 라이브러리 언어(프레임워크)
 => 선택자,이벤트처리,Ajax,JSON
 
https://jquery.com/

Download the compressed, production jQuery 3.6.0
 => 압축된 파일(주석X,줄바꿈,공백X)

Download the uncompressed, development jQuery 3.6.0
 => 비압축된 파일 (주석O,줄바꿈,공백O)

Download the compressed, production jQuery 3.6.0 slim build
 => 압축된 슬림 파일(주석X,줄바꿈,공백X, Ajax,효과 X)
Download the uncompressed, development jQuery 3.6.0 slim build
=> 비압축된 슬림 파일 (주석O,줄바꿈,공백O, Ajax,효과 X)


     jQuery  CDN (Content Delivery Network)


	  https://code.jquery.com
	  <script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
	  
	  
	  https://developers.google.com/speed/libraries#jquery	  
	  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>


	  https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0
	  https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.6.0.js


	  * 가능하면 아래 2개를 활용	  
	  https://cdnjs.com/libraries/jquery
	  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	  
	  https://www.jsdelivr.com/package/npm/jquery
	  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
	  	  




  * 절대경로
   - 파일, 웹페이지가 가지고있는 고유한 경로
   - 시작점에 [ / ]를 사용하여 접근
   
    ex) ~~~~ /WebContent/jq/test1.jsp
  
  
  * 상대경로
   - 파일이 위치한 폴더를 기준으로 시작점을 설정한 경로
   - 시작점  [ / (최상위경로),  ./(현재 폴더),  ../(상위폴더) ]
   
     ex)  ../js/jquery.js
     
     
     
     * Ajax (Asynchronous JavaScript and XML) : 비동기방식의 JavaScript와 Xml
     
      => 동기방식 처리 : 서버 페이지요청 -> 처리 -> 응답(상태) 페이지 전달(사용가능)
         => 화면이 깜빡 깜빡 (페이지 이동 발생)
      
      => 비동기방식 처리 : 서버 페이지 요청 -> 처리 -> 응답 페이지 전달 (상태여부와 상관없이 사용가능)
         => 화면 깜빡 X ( 페이지 이동 없음)
     
   
  
    * Jquery를 사용한 Ajax 처리방법
    https://api.jquery.com/jquery.ajax/#jQuery-ajax-url-settings
    
    
    $.ajax(주소,{옵션,옵션,...});
    
    $.ajax({옵션,.....});
    
    $.ajax({
    	url : "이동할페이지",
    	type : "전송방식(get/post)",
    	data : "전송할 데이터",
    	dataType : "요청한 데이터타입(html,xml,json,text...)",
    	success : fuction( data ){
    	     페이지 이동이 정상적으로 처리된경우 실행하는 코드
    	     data (요청한 데이터)
    	},
    	error : function(){
    	     페이지 이동이 비정상적으로 처리된 경우 실행하는 코드
    	}    
    });



    * HTML
    웹 페이지를 구현하는 언어
    
    장점 : 작업/요청을 처리하고 표시하기 쉽다.
           서버에서 처리된 결과를 화면에 별도 처리 없이 추가 가능
    
    단점 : html 형태의 데이터를 리턴해야만 올바른 값을 보여줌,
          요청이 반드시 동일한 도메인에서 처리해야함.
          a.html -> a.html 페이지처리 
           
           
           
   * XML (확장 가능한 마크업 언어)
    HTML 형태와 유사하게 생김. 태그의 형태로 정보 저장
    
    장점 : 복잡한 구조의 데이터를 저장가능.  (<itwill>김학생</itwill>)
           이기종 및 응용프로그램 사이의 데이터 교환이 좋음.
           HTML 기본 메서드 활용가능(기능제한)
    
    단점 : 데이터보다 많은 태그의 양(데이터 리소스가 많음, 처리속도 느림)
           요청이 반드시 동일한 도메인에서 처리해야함.
            a.html -> a.html 페이지처리  
    
    
    * JSON (JavaScript Object Notation)
        자바스크립트로 만들어진 객체
        
       장점 : 다른 도메인주소에서 호출 가능,
              데이터가 매우 간결 ( 키 : 값 ),
              웹 환경개발에서의 주력 데이터 폼
              
       단점 : 자바스크립트 문법을 준수.(문법에 예민),
              자바스크립트로 구성되어있기 때문에 악의적인 목적으로 사용가능
       
       
     - 단순 텍스트 형태의 표기법
     - 속성:값 형태의 쌍으로 이우러진 데이터 (데이터 리소스 크키가 적다)
     - 플랫폼에 독립적이다. (규칙에 예민)
     - 대부분의 언어에서 json 파서/api를 제공
       
     * JSON문법
     
      - JSON 데이터 : "속성(key)" : 값(value),"속성(key)" : 값(value)
      - JSON 객체 : { }
      - JSON 배열 : [ ]  
      
      - 정수(2진수,8진수,16진수 X)
        10000,   0 ,  -19
        
      - 실수(고정 소수점/부동 소수점)
        1.123, -55.234 / 1e4, 6.4E-5
        
      - Boolean
        true / false
           
      - Null값 
        null
        
      - 문자열 ("", 0개이상의 유니코드 문자 / 이스케이프 문자 지원)
      
      - 배열 ( [], 데이터 타입 상관없이 저장가능 )  
        
        
      - 날짜 데이터 X (json 지원X) -> 문자로 표기 
        









